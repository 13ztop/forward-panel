name: Auto Sync from bqlpfy/forward-panel

on:
  schedule:
    - cron: '0 0 * * *'  # 每天UTC时间0点（北京时间8点）自动同步
  workflow_dispatch:      # 允许手动触发

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      # 步骤 1: 验证必要的 Secrets
      - name: Verify Secrets
        run: |
          if [ -z "${{ secrets.SYNC_TOKEN }}" ]; then
            echo "::error::SYNC_TOKEN未设置"
            exit 1
          fi
          
          if [ -n "${{ secrets.TELEGRAM_BOT_TOKEN }}" ] && [ -n "${{ secrets.TELEGRAM_CHAT_ID }}" ]; then
            echo "TELEGRAM_ENABLED=true" >> $GITHUB_ENV
          else
            echo "TELEGRAM_ENABLED=false" >> $GITHUB_ENV
          fi
          echo "Secrets验证通过"

      # 步骤 2: 获取目标仓库默认分支
      - name: Detect default branch
        run: |
          DEFAULT_BRANCH=$(curl -s -H "Authorization: token ${{ secrets.SYNC_TOKEN }}" \
          "https://api.github.com/repos/13ztop/forward-panel" | jq -r .default_branch)
          
          if [ -z "$DEFAULT_BRANCH" ] || [ "$DEFAULT_BRANCH" = "null" ]; then
            DEFAULT_BRANCH="main"
          fi
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV
          echo "使用分支: $DEFAULT_BRANCH"

      # 步骤 3: 设置时间（提前）
      - name: Set Shanghai time
        run: |
          CURRENT_TIME=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M %Z')
          echo "CURRENT_TIME=$CURRENT_TIME" >> $GITHUB_ENV
          echo "SHORT_HASH=$(cd ./source-repo 2>/dev/null && git rev-parse --short HEAD || echo 'unknown')" >> $GITHUB_ENV

      # 步骤 4: 检出目标仓库
      - name: Checkout target repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SYNC_TOKEN }}
          repository: 13ztop/forward-panel
          path: target-repo
          ref: ${{ env.DEFAULT_BRANCH }}

      # 步骤 5: 克隆源仓库并获取源仓库提交哈希
      - name: Clone source repo
        run: |
          git clone --depth 1 https://github.com/bqlpfy/forward-panel.git source-repo
          echo "源仓库克隆完成"
          cd source-repo
          echo "SOURCE_COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "SOURCE_COMMIT_LINK=https://github.com/bqlpfy/forward-panel/commit/$(git rev-parse HEAD)" >> $GITHUB_ENV

      # 步骤 6: 备份工作流文件
      - name: Backup workflow files
        run: |
          mkdir -p /tmp/workflow-backup
          if [ -d "$GITHUB_WORKSPACE/target-repo/.github/workflows" ]; then
            cp -r "$GITHUB_WORKSPACE/target-repo/.github/workflows/"* /tmp/workflow-backup/
            echo "工作流文件已备份"
          else
            echo "目标仓库无工作流目录，跳过备份"
          fi

      # 步骤 7: 识别需要保留的文件
      - name: Identify protected files
        id: find_protected
        run: |
          protected_files=(
            "README*.md"
            "LICENSE*"
            ".github/workflows"
            "config"
            "*.env"
            "docker-compose*.yml"
            "data"
            "certs"
            "nginx.conf"
            "custom.json"
            ".gitignore"
          )
          
          # 创建保护文件列表
          mkdir -p /tmp/repo-backup
          for pattern in "${protected_files[@]}"; do
            # 使用find命令，并将结果存入文件
            find target-repo -path "*/${pattern}" -print >> /tmp/repo-backup/protected-files.txt 2>/dev/null || true
          done
          
          # 计数保护文件（去重）
          if [ -f /tmp/repo-backup/protected-files.txt ]; then
            protected_count=$(sort -u /tmp/repo-backup/protected-files.txt | wc -l)
          else
            protected_count=0
          fi
          echo "protected_files_count=$protected_count" >> $GITHUB_OUTPUT
          echo "保护文件数: $protected_count"

      # 步骤 8: 执行同步操作（排除保护文件）
      - name: Sync repositories
        run: |
          rsync -av --delete \
            --exclude=.git \
            --exclude-from=/tmp/repo-backup/protected-files.txt \
            source-repo/ target-repo/
          echo "仓库内容同步完成"

      # 步骤 9: 恢复保护文件和工作流
      - name: Restore protected content
        run: |
          # 恢复保护文件（使用rsync）
          if [ -d /tmp/repo-backup/protected-files ]; then
            rsync -av /tmp/repo-backup/protected-files/ target-repo/
          fi
          
          # 恢复工作流文件
          if [ -d "/tmp/workflow-backup" ]; then
            mkdir -p "$GITHUB_WORKSPACE/target-repo/.github/workflows"
            cp -r /tmp/workflow-backup/* "$GITHUB_WORKSPACE/target-repo/.github/workflows/"
          fi
          echo "保护内容已恢复"

      # 步骤 10: 提交和推送变更
      - name: Commit and push changes
        id: commit_push
        run: |
          cd target-repo
          git config user.name "GitHub Actions Sync"
          git config user.email "actions@github.com"
          git add -A
          
          changes_count=0
          if ! git diff-index --quiet HEAD --; then
            changes_count=$(git diff --name-only HEAD | wc -l)
            commit_msg="自动同步: 来自 bqlpfy/forward-panel@${{ env.SOURCE_COMMIT_HASH }}"
            commit_msg+="\n\n更新 $changes_count 个文件"
            if [ ${{ steps.find_protected.outputs.protected_files_count }} -gt 0 ]; then
              commit_msg+=", 保留 ${{ steps.find_protected.outputs.protected_files_count }} 个保护文件"
            fi
            git commit -m "$commit_msg"
            git push origin HEAD:${{ env.DEFAULT_BRANCH }}
            echo "已提交变更并推送"
          else
            echo "无变更可提交"
          fi
          echo "changes_count=$changes_count" >> $GITHUB_OUTPUT

      # 步骤 11: 清理临时文件
      - name: Cleanup
        run: |
          rm -rf source-repo
          rm -rf /tmp/repo-backup
          rm -rf /tmp/workflow-backup
          echo "临时文件清理完成"

      # 步骤 12: 简化版 Telegram 通知
      - name: Telegram Notification
        if: ${{ always() && env.TELEGRAM_ENABLED == 'true' }}
        uses: appleboy/telegram-action@v1.0.0
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          parse_mode: markdown
          message: |
            ${{ job.status == 'success' && '✅' || '❌' }} *${{ github.workflow }} 同步报告*
            ───────────────────
            • **状态**: ${{ job.status == 'success' && '成功' || '失败' }}
            • **源仓库**: [bqlpfy/forward-panel@${{ env.SOURCE_COMMIT_HASH }}](${{ env.SOURCE_COMMIT_LINK }})
            • **目标仓库**: [13ztop/forward-panel](https://github.com/13ztop/forward-panel)
            • **变更文件**: ${{ steps.commit_push.outputs.changes_count || '0' }}
            • **保留文件**: ${{ steps.find_protected.outputs.protected_files_count || '0' }}
            • **时间**: ${{ env.CURRENT_TIME }}
            ───────────────────
            ${{ job.status == 'success' && '✅ 同步完成' || '❌ 同步失败' }}
            [查看日志](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
